// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class EmergencyWithdrawn extends ethereum.Event {
  get params(): EmergencyWithdrawn__Params {
    return new EmergencyWithdrawn__Params(this);
  }
}

export class EmergencyWithdrawn__Params {
  _event: EmergencyWithdrawn;

  constructor(event: EmergencyWithdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get penalty(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newTotalStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RewardRateUpdated extends ethereum.Event {
  get params(): RewardRateUpdated__Params {
    return new RewardRateUpdated__Params(this);
  }
}

export class RewardRateUpdated__Params {
  _event: RewardRateUpdated;

  constructor(event: RewardRateUpdated) {
    this._event = event;
  }

  get oldRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newPendingRewards(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newTotalStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get currentRewardRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StakingInitialized extends ethereum.Event {
  get params(): StakingInitialized__Params {
    return new StakingInitialized__Params(this);
  }
}

export class StakingInitialized__Params {
  _event: StakingInitialized;

  constructor(event: StakingInitialized) {
    this._event = event;
  }

  get stakingToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get initialRewardRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakingPaused extends ethereum.Event {
  get params(): StakingPaused__Params {
    return new StakingPaused__Params(this);
  }
}

export class StakingPaused__Params {
  _event: StakingPaused;

  constructor(event: StakingPaused) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class StakingUnpaused extends ethereum.Event {
  get params(): StakingUnpaused__Params {
    return new StakingUnpaused__Params(this);
  }
}

export class StakingUnpaused__Params {
  _event: StakingUnpaused;

  constructor(event: StakingUnpaused) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokenRecovered extends ethereum.Event {
  get params(): TokenRecovered__Params {
    return new TokenRecovered__Params(this);
  }
}

export class TokenRecovered__Params {
  _event: TokenRecovered;

  constructor(event: TokenRecovered) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newTotalStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get currentRewardRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get rewardsAccrued(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class token extends ethereum.Event {
  get params(): token__Params {
    return new token__Params(this);
  }
}

export class token__Params {
  _event: token;

  constructor(event: token) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class stake_contract__getUserDetailsResultValue0Struct extends ethereum.Tuple {
  get stakedAmount(): BigInt {
    return this[0].toBigInt();
  }

  get lastStakeTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get pendingRewards(): BigInt {
    return this[2].toBigInt();
  }

  get timeUntilUnlock(): BigInt {
    return this[3].toBigInt();
  }

  get canWithdraw(): boolean {
    return this[4].toBoolean();
  }
}

export class stake_contract__getUserDetails1ResultValue0Struct extends ethereum.Tuple {
  get stakedAmount(): BigInt {
    return this[0].toBigInt();
  }

  get lastStakeTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get pendingRewards(): BigInt {
    return this[2].toBigInt();
  }

  get timeUntilUnlock(): BigInt {
    return this[3].toBigInt();
  }

  get canWithdraw(): boolean {
    return this[4].toBoolean();
  }
}

export class stake_contract__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getStakedAmount(): BigInt {
    return this.value0;
  }

  getLastStakeTimestamp(): BigInt {
    return this.value1;
  }

  getRewardDebt(): BigInt {
    return this.value2;
  }

  getPendingRewards(): BigInt {
    return this.value3;
  }
}

export class stake_contract extends ethereum.SmartContract {
  static bind(address: Address): stake_contract {
    return new stake_contract("stake_contract", address);
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", "PRECISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRECISION", "PRECISION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWARDS_PER_MINUTE_PRECISION(): BigInt {
    let result = super.call(
      "REWARDS_PER_MINUTE_PRECISION",
      "REWARDS_PER_MINUTE_PRECISION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_REWARDS_PER_MINUTE_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REWARDS_PER_MINUTE_PRECISION",
      "REWARDS_PER_MINUTE_PRECISION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  aprReductionPerThousand(): BigInt {
    let result = super.call(
      "aprReductionPerThousand",
      "aprReductionPerThousand():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_aprReductionPerThousand(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "aprReductionPerThousand",
      "aprReductionPerThousand():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentRewardRate(): BigInt {
    let result = super.call(
      "currentRewardRate",
      "currentRewardRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_currentRewardRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentRewardRate",
      "currentRewardRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emergencyWithdrawPenalty(): BigInt {
    let result = super.call(
      "emergencyWithdrawPenalty",
      "emergencyWithdrawPenalty():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_emergencyWithdrawPenalty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "emergencyWithdrawPenalty",
      "emergencyWithdrawPenalty():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingRewards(_user: Address): BigInt {
    let result = super.call(
      "getPendingRewards",
      "getPendingRewards(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigInt();
  }

  try_getPendingRewards(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingRewards",
      "getPendingRewards(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimeUntilUnlock(_user: Address): BigInt {
    let result = super.call(
      "getTimeUntilUnlock",
      "getTimeUntilUnlock(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigInt();
  }

  try_getTimeUntilUnlock(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimeUntilUnlock",
      "getTimeUntilUnlock(address):(uint256)",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalRewards(): BigInt {
    let result = super.call(
      "getTotalRewards",
      "getTotalRewards():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalRewards",
      "getTotalRewards():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserDetails(
    _user: Address,
  ): stake_contract__getUserDetailsResultValue0Struct {
    let result = super.call(
      "getUserDetails",
      "getUserDetails(address):((uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(_user)],
    );

    return changetype<stake_contract__getUserDetailsResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getUserDetails(
    _user: Address,
  ): ethereum.CallResult<stake_contract__getUserDetailsResultValue0Struct> {
    let result = super.tryCall(
      "getUserDetails",
      "getUserDetails(address):((uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<stake_contract__getUserDetailsResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  initialApr(): BigInt {
    let result = super.call("initialApr", "initialApr():(uint256)", []);

    return result[0].toBigInt();
  }

  try_initialApr(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("initialApr", "initialApr():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minLockDuration(): BigInt {
    let result = super.call(
      "minLockDuration",
      "minLockDuration():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minLockDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minLockDuration",
      "minLockDuration():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakingToken(): Address {
    let result = super.call("stakingToken", "stakingToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakingToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakingToken", "stakingToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserDetails1(
    _user: Address,
  ): stake_contract__getUserDetails1ResultValue0Struct {
    let result = super.call(
      "getUserDetails",
      "getUserDetails(address):((uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(_user)],
    );

    return changetype<stake_contract__getUserDetails1ResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getUserDetails1(
    _user: Address,
  ): ethereum.CallResult<stake_contract__getUserDetails1ResultValue0Struct> {
    let result = super.tryCall(
      "getUserDetails",
      "getUserDetails(address):((uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<stake_contract__getUserDetails1ResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  userInfo(param0: Address): stake_contract__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new stake_contract__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
    );
  }

  try_userInfo(
    param0: Address,
  ): ethereum.CallResult<stake_contract__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new stake_contract__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
      ),
    );
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAprReductionPerThousandCall extends ethereum.Call {
  get inputs(): SetAprReductionPerThousandCall__Inputs {
    return new SetAprReductionPerThousandCall__Inputs(this);
  }

  get outputs(): SetAprReductionPerThousandCall__Outputs {
    return new SetAprReductionPerThousandCall__Outputs(this);
  }
}

export class SetAprReductionPerThousandCall__Inputs {
  _call: SetAprReductionPerThousandCall;

  constructor(call: SetAprReductionPerThousandCall) {
    this._call = call;
  }

  get _newReduction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAprReductionPerThousandCall__Outputs {
  _call: SetAprReductionPerThousandCall;

  constructor(call: SetAprReductionPerThousandCall) {
    this._call = call;
  }
}

export class SetEmergencyWithdrawPenaltyCall extends ethereum.Call {
  get inputs(): SetEmergencyWithdrawPenaltyCall__Inputs {
    return new SetEmergencyWithdrawPenaltyCall__Inputs(this);
  }

  get outputs(): SetEmergencyWithdrawPenaltyCall__Outputs {
    return new SetEmergencyWithdrawPenaltyCall__Outputs(this);
  }
}

export class SetEmergencyWithdrawPenaltyCall__Inputs {
  _call: SetEmergencyWithdrawPenaltyCall;

  constructor(call: SetEmergencyWithdrawPenaltyCall) {
    this._call = call;
  }

  get _newPenalty(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetEmergencyWithdrawPenaltyCall__Outputs {
  _call: SetEmergencyWithdrawPenaltyCall;

  constructor(call: SetEmergencyWithdrawPenaltyCall) {
    this._call = call;
  }
}

export class SetInitialAprCall extends ethereum.Call {
  get inputs(): SetInitialAprCall__Inputs {
    return new SetInitialAprCall__Inputs(this);
  }

  get outputs(): SetInitialAprCall__Outputs {
    return new SetInitialAprCall__Outputs(this);
  }
}

export class SetInitialAprCall__Inputs {
  _call: SetInitialAprCall;

  constructor(call: SetInitialAprCall) {
    this._call = call;
  }

  get _newApr(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetInitialAprCall__Outputs {
  _call: SetInitialAprCall;

  constructor(call: SetInitialAprCall) {
    this._call = call;
  }
}

export class SetMinLockDurationCall extends ethereum.Call {
  get inputs(): SetMinLockDurationCall__Inputs {
    return new SetMinLockDurationCall__Inputs(this);
  }

  get outputs(): SetMinLockDurationCall__Outputs {
    return new SetMinLockDurationCall__Outputs(this);
  }
}

export class SetMinLockDurationCall__Inputs {
  _call: SetMinLockDurationCall;

  constructor(call: SetMinLockDurationCall) {
    this._call = call;
  }

  get _newDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinLockDurationCall__Outputs {
  _call: SetMinLockDurationCall;

  constructor(call: SetMinLockDurationCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
