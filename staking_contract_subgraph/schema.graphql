type token @entity(immutable: false) {
  id: Bytes!
  value: BigInt!
  timestamp: BigInt
  totalTokenAvailable: BigInt!
}

type Transactions @entity(immutable: false) {
  id: Bytes!
  value: BigInt!
  totalTransactions: BigInt!
  totalUserTransactions: BigInt!
  totalUserRewards: BigInt!
  totalUserStake: BigInt!
  totalUserEmergencyWithdrawn: BigInt!
  totalUserWithdrawn: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type ContractDetails @entity(immutable: false) {
  id: Bytes!
  totalMinted: BigInt!
  totalStakes: BigInt!
  totalRewardsGiven: BigInt!
  totalEmergencyWithdrawn: BigInt!
  totalWithdrawn: BigInt!
}

type EmergencyWithdrawnEvent @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type RewardsClaimedEvent @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type StakedEvent @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  amount: BigInt!
  newTotalStaked: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type WithdrawnEvent @entity(immutable: true) {
  id: Bytes!
  user: Bytes!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type TokenEvent @entity(immutable: true) {
  id: Bytes!
  value: BigInt!
  user: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

# Add these for your second dataSource (staking_token_contract) events, assuming standard ERC20 patterns
type ApprovalEvent @entity(immutable: true) {
  id: Bytes!
  owner: Bytes!
  spender: Bytes!
  value: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}

type TransferEvent @entity(immutable: true) {
  id: Bytes!
  from: Bytes!
  to: Bytes!
  value: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
}
